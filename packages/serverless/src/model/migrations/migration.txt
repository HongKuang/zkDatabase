
  public static async init() {
    const userCollection = new ModelCollection(
      ZKDATABASE_GLOBAL_DB,
      ModelUser.collectionName
    );

    await userCollection.create(
      [{ userName: 1 }, { email: 1 }, { publicKey: 1 }],
      {
        unique: true,
      }
    );

    await userCollection.create([{ active: 1 }]);

    await new ModelUser().insertMany(
      ModelUser.defaultUsers.map((e) => ({
        userName: e,
        email: '',
        publicKey: '',
        activated: true,
        createdAt: getCurrentTime(),
        updatedAt: getCurrentTime(),
        userData: { description: `Default user: ${e}` },
      }))
    );


  }


  public async create() {
    return new ModelCollection(this.databaseName, this.collectionName).create(
      { configKey: 1 },
      { unique: true }
    );
  }



  public static async init(databaseName: string) {
    // Index for group name
    await new ModelCollection(databaseName, ModelGroup.collectionName).create(
      { groupName: 1 },
      { unique: true }
    );

    // Create default group
    await new ModelGroup(databaseName).insertMany([
      {
        groupName: ZKDATABAES_GROUP_SYSTEM,
        description: 'System group',
        createdBy: ZKDATABAES_USER_SYSTEM,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        groupName: 'admin',
        description: 'Admin group',
        createdBy: ZKDATABAES_USER_SYSTEM,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        groupName: 'user',
        description: 'User group',
        createdBy: ZKDATABAES_USER_SYSTEM,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        groupName: ZKDATABAES_GROUP_NOBODY,
        description: 'Nobody group',
        createdBy: ZKDATABAES_USER_SYSTEM,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ]);
  }

    public static async init() {
    return new ModelCollection(ZKDATABASE_GLOBAL_DB, 'session').create([
      { userName: 1 },
      { sessionKey: 1 },
      { sessionId: 1 },
    ]);
  }